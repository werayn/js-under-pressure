[
    {
        'name': 'square',
        'description': 'return x squared',
        'tests' : [
            { 'argument' :  2,   'expectedResult' : 4    },
            { 'argument' :  4,   'expectedResult' : 16   },
            { 'argument' :  1.5, 'expectedResult' : 2.25 },
            { 'argument' : -12,  'expectedResult' : 144  },
            { 'argument' : -1.5, 'expectedResult' : 2.25 },
        ],
    },
    {
        'name': 'invertCase',
        'description': 'x is a string. turn lowercase letters to uppercase and vice versa.',
        'tests' : [
            { 'argument' : 'funkey monkey', 'expectedResult' : 'FUNKEY MONKEY' },
            { 'argument' : 'MONKEY MAGIC',  'expectedResult' : 'monkey magic' },
            { 'argument' : 'FlIrPyDuck',    'expectedResult' : 'fLiRpYdUCK' },
            { 'argument' : '', 'expectedResult' : '' },
        ],
    },
    {
        'name': 'sumDigits',
        'description': 'sum the digits of the number x',
        'tests' : [
            { 'argument' : 2,     'expectedResult' : 2  },
            { 'argument' : 412,   'expectedResult' : 7  },
            { 'argument' : 8.19,  'expectedResult' : 18 },
            { 'argument' : 4.12,  'expectedResult' : 7  },
            { 'argument' : 0,     'expectedResult' : 0  },
            { 'argument' : -14,   'expectedResult' : 5  },
            { 'argument' : -1.4,  'expectedResult' : 5  },
        ],
    },
    {
        'name': 'flatten',
        'description': 'x is an arbitrarily nested, multidimensional array. return x flattened (all items in 1 dimension)',
        'tests' : [
            { 'argument' : [], 'expectedResult' : [] },
            { 'argument' : [0, 1, 2], 'expectedResult' : [0, 1, 2] },
            { 'argument' : [[], 0, [1]], 'expectedResult' : [0, 1] },
            {
                'argument'  : [0, [[[[[1, [2]]]]], 3], [4, [5]]],
                'expectedResult' : [0, 1, 2, 3, 4, 5],
            },
        ],
    },
    {
        'name': 'isBalanced',
        'description': 'x is a string. return whether its parentheses are balanced that is, whether every opening ( has a closing )',
        'tests' : [
            { 'param' : '', 'result' : true },
            { 'param' : '(', 'result' : false },
            { 'param' : '()', 'result' : true },
            { 'param' : '(1)', 'result' : true },
            { 'param' : ')(', 'result' : false },
            { 'param' : '())(()', 'result' : false },
            { 'param' : '((a()b)c(l(pnq))())', 'result' : true },
            { 'param' : '((a()b)c(l(pnq))()', 'result' : false },
        ],
    },
    {
        'name': 'hasBalancePoint',
        'description': 'x is an array of numbers. return whether there is an index where the sum before (excluding) it is equal to the sum after (including) it.',
        'tests' : [
            { 'argument' : [],  'expectedResult' : true },
            { 'argument' : [0], 'expectedResult' : true },
            { 'argument' : [42, 6, 19, 11, 11, 7], 'expectedResult' : true },
            { 'argument' : [1, 2], 'expectedResult' : false },
        ],
    },
    {
        'name': 'mode',
        'description': 'x is an array of at least 1 item. return the most frequent item (there won"t be collisions)',
        'tests' : [
            { 'argument' : [0], 'expectedResult' : 0 },
            { 'argument' : [0, 1, 1, 2], 'expectedResult' : 1 },
            {
                'argument'  : [{}, 0, [1], 'foo', true, false, null, true],
                'expectedResult' : true,
            },
        ],
    },
];
